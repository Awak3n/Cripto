package problema.pkg2.servidor;

import java.io.IOException;
import java.util.StringTokenizer;

public class MainServer extends javax.swing.JFrame {
    JPanelMain jm;
    ActionController ac;
    Server server;
    
    @SuppressWarnings("OverridableMethodCallInConstructor")
    public MainServer() {
        super("Batalha Naval");
        initComponents();
        jm = new JPanelMain();
        server = new Server();
        this.getContentPane().add(jm);
        
        ac = new ActionController(this);
        
        jm.jButton2.addActionListener(ac);
        jm.jButton4.addActionListener(ac);
        jm.jButton5.addActionListener(ac);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        setBounds(0, 0, 1296, 439);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    @SuppressWarnings("CallToPrintStackTrace")
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        MainServer main = new MainServer();
        java.awt.EventQueue.invokeLater(() -> {
            main.setVisible(true);
        });
        
        /*
         * inicializando o servidor e recebendo dados do cliente fora da thread da interface gráfica
         * para que a mesma não seja afetada pelo processo demorado de recebimento de dados
         */
        main.server.startRunning();
        
        try{
            //inserindo os navios inimigos no mapa assim que os dados forem recebidos
            main.ac.showMessage("\nVocês estão conectados!");
            //e inicializa o campo do adversário
            main.clientAction(main);
        }catch(IOException | ClassNotFoundException ex){
            main.ac.showMessage("\n\nEncerrando conexões...");
        }
    }
    
    @SuppressWarnings("InfiniteRecursion")
    private void clientAction(MainServer ms) throws IOException, ClassNotFoundException{
        String msg;
        msg = server.receiveData();
        
        //espera até que o cliente receba os dados para encerrar o programa
        if (msg.equals("end"))
            throw new IOException();
        //str recebe os dados do cliente
        
        new ActionController(ms).showMessage("\nO outro diz:\n" + msg);
        
        clientAction(ms);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}